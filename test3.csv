name,parent,value,code,lines
Origin,,,,
Type#1 Clone,Origin,4,\n if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:,"3477,3484,3500,3507"
Type#1 Clone,Origin,4,}}}}package smallsql.database;import java.sql.*;import smallsql.database.language.Language;,"4959,4966,9424,9431"
Type#1 Clone,Origin,4,case OR:case AND:case NOT:case LIKE:case ISNULL:case ISNOTNULL:,"18071,18077,18105,18111"
Type#1 Clone,Origin,6,"assertEquals(1,pr.executeUpdate());rs = pr.getGeneratedKeys();assertNotNull(""RETURN_GENERATED_KEYS"", rs);assertEquals(""ColumnCount"",1,rs.getMetaData().getColumnCount());assertEquals(""ColumnCount"",""i"",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);","23991,23997,24004,24010,24017,24023"
Type#1 Clone,Origin,4,break;case SQLTokenizer.BIGINT:case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:,"21175,21183,21242,21250"
Type#1 Clone,Origin,4,"pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();","18634,18643,18657,18666"
Type#1 Clone,Origin,4,final boolean rowInserted(){return false;}final boolean rowDeleted(){return false;},"21983,21989,22026,22032"
Type#1 Clone,Origin,4,if(num.scale < scale){num.setScale(scale);}elseif(num.scale > scale){setScale(num.scale);},"20511,20523,20538,20550"
Type#1 Clone,Origin,4,}else{prev.nextLock = lock.nextLock;}return;}prev = lock;lock = lock.nextLock;},"14807,14814,23438,23445"
Type#1 Clone,Origin,6,"if(idx == -1){if(status.nodeValue != null){if(status.nodeValue instanceof IndexNode){level++;nodeStack.push(new IndexNodeScrollStatus( 	(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}","8565,8572,9289,9296,19757,19764"
Type#1 Clone,Origin,4,}boolean isNull() throws Exception {return param1.isNull();}final int getInt() throws Exception {if(isNull()) return 0;String str = param1.getString();,"15597,15629,17808,17840"
Type#1 Clone,Origin,4,if(isNull()) return null;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:,"11398,11404,13190,13196"
Type#1 Clone,Origin,4,"pr.close();time += System.currentTimeMillis();System.out.println(""  Test time:"" + time +""ms"");fis.close();java.io.File file = new java.io.File(tableName+"".bin"");file.delete();}catch(Exception e){System.out.println(""  Failed:""+e);}finally{System.out.println();System.out.println(""==================================================================="");}}","4215,4228,4247,4260"
Type#1 Clone,Origin,4,if(isNull()) return null;return new MutableNumeric(getInt());}Object getObject() throws Exception {if(isNull()) return null;return Utils.getInteger(getInt());},"15394,15401,19738,19745"
Type#1 Clone,Origin,4,"}time += System.currentTimeMillis();System.out.println(""  Test time:"" + time +"" ms"");st.close();}catch(Exception e){System.out.println(""  Failed:""+e);}finally{System.out.println();System.out.println(""==================================================================="");}}","3987,3998,4189,4200"
Type#1 Clone,Origin,6,"try{rs.getString(""v"");fail(""SQLException 'No current row' should be throw"");}catch(SQLException ex){assertSQLException(""01000"", 0, ex);}}","19233,19240,19264,19271"
Type#1 Clone,Origin,6,case SQLTokenizer.COMMA:continue;default:throw new Error();}}},"16560,16567,16614,16621"
Type#1 Clone,Origin,4,}final boolean isNull() throws Exception {return param1.isNull();}final byte[] getBytes() throws Exception{if(isNull()) return null;byte[] bytes = param1.getBytes();,"5936,5943,9878,9885"
Type#1 Clone,Origin,4,"}int getPrecision() {return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );}}package smallsql.database;","2509,2515,9959,9965"
Type#1 Clone,Origin,4,"private static TestValue a(String dataType, Object small, Object large){TestValue value = new TestValue();value.dataType  = dataType;value.small     = small;value.large     = large;return value;}private static class TestValue{String dataType;Object small;Object large;}}package smallsql.database;","18933,18948,23365,23380"
Type#1 Clone,Origin,6,switch(operation){case IN:case EQUALS_NULL:case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:,"17985,17995,18010,18020,18032,18042"
Type#1 Clone,Origin,4,"try{java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+"".bin"");byte bytes[] = new byte[1024];for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+"".bin"");long time = -System.currentTimeMillis();","4203,4212,4231,4240"
Type#1 Clone,Origin,8,}catch(Throwable e){con.rollback(savepoint);throw SmallSQLException.createFromException(e);}finally{if(con.getAutoCommit()) con.commit();}},"11932,11939,11968,11975,11983,11990,15278,15285"
Type#1 Clone,Origin,4,"try{int maxRows = Integer.parseInt(token.getName(sql));selCmd.setMaxRows(maxRows);}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}","15975,15981,17362,17368"
Type#1 Clone,Origin,4,break;case SQLTokenizer.VARBINARY:case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:,"21195,21201,21261,21267"
Type#1 Clone,Origin,4,if(page == null)return null;if(i + 1 == count)return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();},"21129,21138,21143,21152"
Type#1 Clone,Origin,4,"assertTrue( rs.next() );oldValue = rs.getString(""v"");int count = 1;while(oldValue != null && rs.next()){String newValue = rs.getString(""v"");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}","14229,14244,14251,14266"
Type#1 Clone,Origin,6,rows.add(row);}}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;},"11264,11273,11297,11306,11325,11334"
Type#1 Clone,Origin,4,"case SQLTokenizer.UNIQUEIDENTIFIER:return Utils.bytes2unique( page, this.offset);default: throw new Error();}}@Override","8096,8102,8158,8164"
Type#1 Clone,Origin,4,"if(serializeConnections.size() > 0){Iterator values = locks.values().iterator();while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);","18509,18520,18526,18537"
Type#1 Clone,Origin,4,"private static final TestValue[] TESTS = new TestValue[]{a(""tinyint""           , new Byte( (byte)3),     new Byte( (byte)4)),a(""byte""              , new Byte( (byte)3),     new Byte( (byte)4)),a(""smallint""          , new Short( (short)3),   new Short( (short)4)),a(""int""               , new Integer(3),         new Integer(4)),a(""bigint""            , new Long(3),            new Long(4)),a(""real""              , new Float(3.45),        new Float(4.56)),a(""float""             , new Float(3.45),        new Float(4.56)),a(""double""            , new Double(3.45),       new Double(4.56)),a(""smallmoney""        , new Float(3.45),        new Float(4.56)),a(""money""             , new Float(3.45),        new Float(4.56)),a(""money""             , new Double(3.45),       new Double(4.56)),a(""numeric(19,2)""     , new BigDecimal(""3.45""), new BigDecimal(""4.56"")),a(""decimal(19,2)""     , new BigDecimal(""3.45""), new BigDecimal(""4.56"")),","18800,18814,23178,23192"
Type#1 Clone,Origin,4,}String getString() throws Exception{Object obj = getObject();if(obj == null) return null;return obj.toString();}},"5075,5082,8705,8712"
Type#1 Clone,Origin,4,if(!previous()){return false;}}}return true;},"10922,10929,10939,10946"
Type#1 Clone,Origin,4,wasNull = expr.isNull();return expr.getFloat();}catch(Exception e){throw SmallSQLException.createFromException( e );}},"14088,14094,18677,18683"
Type#1 Clone,Origin,4,}catch(Throwable e){if(raFile != null)try{raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}},"2590,2596,10090,10096"
Type#1 Clone,Origin,4,this.offset = valueOffset;if(readBoolean()) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:,"1386,1396,22381,22391"
Type#1 Clone,Origin,8,try{Expression expr = getValue(i);wasNull = expr.isNull();return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}},"7689,7697,7750,7758,7810,7818,7870,7878"
Type#1 Clone,Origin,4,wasNull = expr.isNull();return expr.getBoolean();}catch(Exception e){throw SmallSQLException.createFromException( e );}},"2579,2587,2597,2605"
Type#1 Clone,Origin,4,"assertEquals(""getRow"", 1, rs.getRow() );assertTrue(""isLast"", rs.isLast() );assertFalse(""next"", rs.next() );assertFalse(""isBeforeFirst"", rs.isBeforeFirst() );assertTrue(""isAfterLast"", rs.isAfterLast() );assertEquals(""getRow"", 0, rs.getRow() );assertTrue(""first"", rs.first() );assertEquals(""getRow"", 1, rs.getRow() );assertFalse(""previous"", rs.previous() );assertEquals(""getRow"", 0, rs.getRow() );assertTrue(""isBeforeFirst"", rs.isBeforeFirst() );assertFalse(""isAfterLast"", rs.isAfterLast() );assertTrue(""last"", rs.last() );assertEquals(""getRow"", 1, rs.getRow() );assertTrue(""isLast"", rs.isLast() );rs.afterLast();assertFalse(""isBeforeFirst"", rs.isBeforeFirst() );assertTrue(""isAfterLast"", rs.isAfterLast() );assertEquals(""getRow"", 0, rs.getRow() );}","2557,2563,10057,10063"
Type#1 Clone,Origin,4,wasNull = expr.isNull();if(wasNull) return null;return DateTime.getDate( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}},"13636,13656,13671,13691"
Type#1 Clone,Origin,4,wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal(scale);}catch(Exception e){throw SmallSQLException.createFromException( e );}},"2627,2634,10127,10134"
Type#1 Clone,Origin,4,wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal();}catch(Exception e){throw SmallSQLException.createFromException( e );}},"2608,2615,10108,10115"
Type#1 Clone,Origin,4,wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTimestamp( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}},"2666,2673,10246,10253"
Type#1 Clone,Origin,4,"}finally{dropTable(con1,""transactions"");con1.setAutoCommit(true);con2.close();}}","2647,2654,10147,10154"
Type#1 Clone,Origin,4,"Statement st = con.createStatement();try{st.execute(""CREATE TABLE ConcurrentWrite( value int)"");st.execute(""INSERT INTO ConcurrentWrite(value) Values(0)"");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{","5353,5359,5371,5377"
Type#1 Clone,Origin,4,"pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);rs = pr.executeQuery();assertTrue(""To few rows"", rs.next() );assertTrue(""To few rows"", rs.next() );assertTrue(""To few rows"", rs.next() );assertTrue(""To few rows"", rs.next() );assertTrue(""To few rows"", rs.next() );assertFalse(""To many rows"", rs.next() );pr.close();","18722,18730,18757,18765"
Type#1 Clone,Origin,4,"byte[] buffer = new byte[length];System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );return buffer;}return bytes;}","23317,23327,23336,23346"
Type#1 Clone,Origin,4,"if(failed == null){failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);failed.initCause(ex);}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}","9048,9054,9058,9064"
Type#1 Clone,Origin,4,case SQLTokenizer.TIMESTAMP:return readTimestamp();case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:,"19617,19629,21634,21646"
Type#1 Clone,Origin,6,if(isNull()) return 0;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:,"7796,7805,7856,7865,7916,7925"
Type#1 Clone,Origin,4,final boolean getBoolean() throws Exception {if(isNull()) return false;return Utils.string2boolean(getString().trim());}final int getInt() throws Exception {if(isNull()) return 0;return Integer.parseInt(getString().trim());}final long getLong() throws Exception {if(isNull()) return 0;return Long.parseLong(getString().trim());}final float getFloat() throws Exception {if(isNull()) return 0;return Float.parseFloat(getString().trim());}final double getDouble() throws Exception {if(isNull()) return 0;return Double.parseDouble(getString().trim());}final long getMoney() throws Exception {if(isNull()) return 0;return Money.parseMoney(getString().trim());}final MutableNumeric getNumeric() throws Exception {if(isNull()) return null;return new MutableNumeric(getString().trim());}final Object getObject() throws Exception {,"17613,17633,17654,17674"
Type#1 Clone,Origin,4,if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:,"5747,5776,10713,10742"
Type#1 Clone,Origin,4,addMessages(ENTRIES);}public String[][] getEntries() {return ENTRIES;}private final String[][] ENTRIES = {,"3412,3421,3445,3454"
Type#1 Clone,Origin,4,case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:,"22651,22657,23169,23175"
Type#1 Clone,Origin,4,final boolean rowInserted(){return rowSource.rowInserted();}final boolean rowDeleted(){return rowSource.rowDeleted();}void nullRow() {rowSource.nullRow();,"5782,5788,11544,11550"
Type#1 Clone,Origin,4,"con1.createStatement().execute(""Create Table transactions (i int identity, v varchar(20))"");assertRowCount( 0,""Select * from transactions"");con1.setAutoCommit(false);con1.createStatement().execute(""Insert Into transactions(v) Values('qwert2')"");ResultSet rs2 = con2.createStatement().executeQuery(""Select count(*) from transactions"");assertTrue( rs2.next() );","10955,10964,21854,21863"
Type#1 Clone,Origin,4,"case SQLTokenizer.LONGVARBINARY:return getBytes();case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();","17552,17558,17589,17595"
Type#1 Clone,Origin,4,keyColumnNames.add(column.getName());keys.add(valueExpress.getObject());break;}}},"5346,5352,5364,5370"
Type#1 Clone,Origin,4,default:throw new Error();}}}package smallsql.database;,"15630,15639,17848,17857"
Type#1 Clone,Origin,4,"rs.next();rs.next();rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehenrs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}","9394,9400,9404,9410"
Type#1 Clone,Origin,6,final long getRowPosition() {return rowSource.getRowPosition();}final void setRowPosition(long rowPosition) throws Exception {rowSource.setRowPosition(rowPosition);}final void nullRow() {rowSource.nullRow();row = 0;}final void noRow() {rowSource.noRow();row = 0;},"3689,3695,4447,4453,8938,8944"
Type#1 Clone,Origin,4,"this.testValue = testValue;}public void tearDown(){try{Connection con = AllTests.getConnection();Statement st = con.createStatement();st.execute(""drop table"" + table);st.close();}catch(Throwable e){}}public void setUp(){tearDown();try{Connection con = AllTests.getConnection();Statement st = con.createStatement();","14616,14632,14639,14655"
Type#1 Clone,Origin,4,"Connection con = AllTests.getConnection();try{con.setAutoCommit(false);con.createStatement().execute(""Create Table transactions (i int identity, v varchar(20))"");assertRowCount( 0,""Select * from transactions"");con.createStatement().execute(""Insert Into transactions(v) Values('qwert')"");","11436,11451,13222,13237"
Type#1 Clone,Origin,4,"raFile = Utils.openRaFile( file, database.isReadOnly() );ByteBuffer buffer = ByteBuffer.allocate(8);raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();","6808,6824,23223,23239"
Type#1 Clone,Origin,4,}}finally {conn.close();}},"5113,5119,5298,5304"
Type#1 Clone,Origin,4,"List rows = new ArrayList();Strings tables = getTables(table);for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);","1373,1379,22361,22367"
Type#1 Clone,Origin,4,result = left.next();if(result){result = right.first();if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;,"13785,13792,20377,20384"
Type#1 Clone,Origin,4,if(value == null){if(expr.isNull())dataType = expr.getDataType();elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:,"6233,6239,6267,6273"
Type#1 Clone,Origin,4,case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:,"11274,11283,11307,11316"
Type#1 Clone,Origin,4,"rs.beforeFirst();assertTrue(""isBeforeFirst"", rs.isBeforeFirst() );assertFalse(""isAfterLast"", rs.isAfterLast() );assertEquals(""getRow"", 0, rs.getRow() );assertTrue(""next"", rs.next() );assertTrue(""isFirst"", rs.isFirst() );","8786,8794,8822,8830"
Type#1 Clone,Origin,4,"try{Statement st1 = con.createStatement();ResultSet rs = st1.executeQuery(""SELECT count(*) FROM"" + tableName);rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery(""SELECT count(*) FROM"" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){","3178,3188,3233,3243"
Type#1 Clone,Origin,4,"}catch(Throwable ex){throwable = ex;}}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200),""SELECT value FROM ConcurrentWrite"");}finally{dropTable(con,""ConcurrentWrite"");}}","7819,7831,7879,7891"
Type#1 Clone,Origin,4,return false;}boolean last() throws Exception{afterLast();return previous();},"13629,13635,13664,13670"
Type#1 Clone,Origin,4,boolean isNull() throws Exception{return param1.isNull() || param2.isNull();}final double getDouble() throws Exception{if(isNull()) return 0;final int places = param2.getInt();double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;},"3856,3869,3952,3965"
Type#1 Clone,Origin,4,"}public void tearDown(){try {dropTable( AllTests.getConnection(), table );} catch (SQLException ex) {ex.printStackTrace();}}","10877,10883,21780,21786"
Type#1 Clone,Origin,4,"Connection con = AllTests.getConnection();try{con.createStatement().execute(""Create Table Scrollable (i counter, v varchar(20))"");assertRowCount( 0,""Select * from Scrollable"");con.createStatement().execute(""Insert Into Scrollable(v) Values('qwert')"");assertRowCount( 1,""Select * from Scrollable"");assertRowCount( 0,""Select * from Scrollable Where 1=0"");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","5904,5923,8532,8551"
Type#1 Clone,Origin,4,result |= (((long)nextEntry) << shift);if(listEnum.stack>=3){listEnum.offsetStack[listEnum.stack] = offset;return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;,"6112,6120,6397,6405"
Type#1 Clone,Origin,8,"assertTrue( rs.next() );oldValue = (Integer)rs.getObject(""i"");assertNull(oldValue);assertTrue( rs.next() );oldValue = (Integer)rs.getObject(""i"");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(""i"") ) < 0 );oldValue = (Integer)rs.getObject(""i"");count++;}assertEquals( valueCount, count );}","19158,19166,19185,19193,19211,19219,19241,19249"
Type#1 Clone,Origin,4,if(places > 0){value /= factor;}else{value *= factor;}return value;}}package smallsql.database;,"9562,9572,9598,9608"
Type#1 Clone,Origin,4,"Connection con = AllTests.getConnection();try{con.createStatement().execute(""Create Table transactions (i int identity, v varchar(20))"");assertRowCount( 0,""Select * from transactions"");con.createStatement().execute(""Insert Into transactions(v) Values('qwert')"");assertRowCount( 1,""Select * from transactions"");con.setAutoCommit(false);con.createStatement().execute(""Insert Into transactions(v) Select v From transactions"");assertRowCount( 2,""Select * from transactions"");","1044,1054,15413,15423"
Type#1 Clone,Origin,4,}final boolean isNull() throws Exception {return param1.isNull() || param2.isNull() || param3.isNull();}final byte[] getBytes() throws Exception{if(isNull()) return null;,"14330,14343,14397,14410"
Type#1 Clone,Origin,4,wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTime( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}},"5924,5933,8552,8561"
Type#1 Clone,Origin,6,"node.addNode( digit, rowOffset );return null;}return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){","11459,11465,13242,13248,21873,21879"
Type#1 Clone,Origin,4,"fail(""SQLException 'Duplicated Column' should be throw"");}catch(SQLException e){assertSQLException(""01000"", 0, e);}}finally{dropTable(con,""DuplicatedColumn"");}}","5134,5143,5176,5185"
Type#1 Clone,Origin,4,"public void runTest() throws Exception{Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;rs = st.executeQuery(""Select * from"" + table +"" where 1 = 0"");assertFalse(""To many rows"", rs.next() );","8303,8309,9908,9914"
Type#1 Clone,Origin,4,wasNull = obj == null;return obj;}catch(Exception e){throw SmallSQLException.createFromException( e );}},"2637,2644,10137,10144"
Type#1 Clone,Origin,4,StringBuffer buf = new StringBuffer(bytes.length << 1);for(int i=0; i<bytes.length; i++){buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();},"10210,10216,13512,13518"
Type#1 Clone,Origin,4,"assertRowCount( 4,""Select * from transactions"");con.commit();assertRowCount( 4,""Select * from transactions"");}finally{try{con.createStatement().execute(""Drop Table transactions"");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}","21328,21335,21376,21383"
Type#1 Clone,Origin,6,"}finally{try{con.createStatement().execute(""Drop Table transactions"");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}","13969,13977,13984,13992"
Type#1 Clone,Origin,10,}firstNode = false;if(shift != 0) offset += pointerSize;}shift -= 16;}},"2548,2554,2618,2624,2657,2663,10118,10124,10225,10231"
Type#1 Clone,Origin,4,wasNull = expr.isNull();return expr.getInt();}catch(Exception e){throw SmallSQLException.createFromException( e );}},"12084,12091,20727,20734"
