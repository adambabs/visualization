[[["if(obj == null) return 0;","switch(dataType){","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:"],[3484,3507,3500,3477]],[["}","}","}","}","package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;"],[9424,4959,4966,9431]],[["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:"],[18077,18071,18105,18111]],[["assertEquals(1,pr.executeUpdate());","rs = pr.getGeneratedKeys();","assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","assertRowCount(1,rs);"],[24010,23991,24004,24023,24017,23997]],[["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:"],[21242,21175,21250,21183]],[["}","}else{","prev.nextLock = lock.nextLock;","}","return;","}","prev = lock;","lock = lock.nextLock;","}"],[18643,18634,18657,18666]],[["if(num.scale < scale){","num.setScale(scale);","}else","if(num.scale > scale){","setScale(num.scale);","}"],[22032,22026,21983,21989]],[["if(idx == -1){","if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}"],[20523,20538,20511,20550]],[["}","final boolean rowInserted(){","return false;","}","final boolean rowDeleted(){","return false;","}"],[14807,23445,23438,14814]],[["}","boolean isNull() throws Exception {","return param1.isNull();","}","final int getInt() throws Exception {","if(isNull()) return 0;","String str = param1.getString();"],[9289,19764,9296,8572,19757,8565]],[["if(isNull()) return null;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],[17840,15629,17808,15597]],[["}","final void beforeFirst() throws Exception {","rowSource.beforeFirst();","row = 0;","}","final boolean first() throws Exception {"],[13196,11398,11404,13190]],[["pr.close();","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","fis.close();","java.io.File file = new java.io.File(tableName+\".bin\");","file.delete();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}"],[4215,4228,4260,4247]],[["if(isNull()) return null;","return new MutableNumeric(getInt());","}","Object getObject() throws Exception {","if(isNull()) return null;","return Utils.getInteger(getInt());","}"],[15401,19738,15394,19745]],[["}","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}"],[3987,3998,4200,4189]],[["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}","}"],[19264,19233,19271,19240]],[["case SQLTokenizer.COMMA:","continue;","default:","throw new Error();","}","}","}"],[16560,16614,16621,16567]],[["}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","byte[] bytes = param1.getBytes();"],[9885,5936,9878,5943]],[["}","int getPrecision() {","return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );","}","}","package smallsql.database;"],[9965,2509,2515,9959]],[["}","private static TestValue a(String dataType, Object small, Object large){","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}","private static class TestValue{","String dataType;","Object small;","Object large;","}","}","package smallsql.database;"],[23365,18948,18933,23380]],[["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return comp == 0;","case GREATER:   return comp >  0;","case GRE_EQU:   return comp >= 0;","case LESSER:    return comp <  0;","case LES_EQU:   return comp <= 0;","case UNEQUALS:  return comp != 0;","case BETWEEN:"],[18042,17985,18032,18010,18020,17995]],[["try{","java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");","byte bytes[] = new byte[1024];","for(int i=0; i<rowCount; i++){","fos.write(bytes);","}","fos.close();","java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");","long time = -System.currentTimeMillis();"],[4203,4231,4240,4212]],[["}catch(Throwable e){","con.rollback(savepoint);","throw SmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit()) con.commit();","}","}"],[15278,11975,11968,11939,15285,11983,11990,11932]],[["try{","int maxRows = Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatException e){","throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","}"],[15981,17362,17368,15975]],[["break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:"],[21195,21201,21267,21261]],[["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","}","throw new Error();","}"],[21143,21138,21129,21152]],[["assertTrue( rs.next() );","oldValue = rs.getString(\"v\");","int count = 1;","while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) > 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],[14229,14266,14244,14251]],[["rows.add(row);","}","}","}","}","Object[][] result = new Object[rows.size()][];","rows.toArray(result);","return result;","}"],[11306,11273,11297,11325,11334,11264]],[["case SQLTokenizer.UNIQUEIDENTIFIER:","return Utils.bytes2unique( page, this.offset);","default: throw new Error();","}","}","@Override"],[8158,8164,8102,8096]],[["}","if(serializeConnections.size() > 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}","tabLockConnection = con;","tabLockCount++;","TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);"],[18537,18526,18520,18509]],[["private static final TestValue[] TESTS = new TestValue[]{","a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],[23192,18814,23178,18800]],[["}","String getString() throws Exception{","Object obj = getObject();","if(obj == null) return null;","return obj.toString();","}","}"],[5082,8712,5075,8705]],[["if(!previous()){","return false;","}","}","}","return true;","}"],[10922,10939,10946,10929]],[["}","}","}","package smallsql.junit;","import java.sql.*;","import java.util.ArrayList;"],[18677,18683,14094,14088]],[["wasNull = expr.isNull();","return expr.getFloat();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10096,10090,2590,2596]],[["}catch(Throwable e){","if(raFile != null)","try{","raFile.close();","}catch(Exception e2){","DriverManager.println(e2.toString());","}","throw SmallSQLException.createFromException(e);","}","}"],[22381,1396,1386,22391]],[["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:"],[7758,7689,7878,7818,7870,7750,7697,7810]],[["try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[2597,2587,2605,2579]],[["wasNull = expr.isNull();","return expr.getBoolean();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10063,2563,2557,10057]],[["assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","assertFalse(\"next\", rs.next() );","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}"],[13636,13671,13691,13656]],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getDate( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10134,10127,2627,2634]],[["wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal(scale);","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[2608,10108,2615,10115]],[["wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10253,2673,2666,10246]],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTimestamp( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10154,2654,2647,10147]],[["}finally{","dropTable(con1, \"transactions\");","con1.setAutoCommit(true);","con2.close();","}","}"],[5359,5353,5377,5371]],[["Statement st = con.createStatement();","try{","st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");","st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");","for(int i = 0; i < 200; i++){","Thread thread = new Thread(new Runnable(){","public void run(){","try{"],[18730,18765,18757,18722]],[["pr.setObject( 1, testValue.small);","pr.setObject( 2, testValue.large);","rs = pr.executeQuery();","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertFalse( \"To many rows\", rs.next() );","pr.close();"],[23327,23346,23336,23317]],[["byte[] buffer = new byte[length];","System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );","return buffer;","}","return bytes;","}"],[9064,9054,9048,9058]],[["if(failed == null){","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}","}","batches.clear();","if(failed != null)","throw failed;","return result;","}"],[19629,21634,19617,21646]],[["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:"],[7865,7796,7916,7856,7805,7925]],[["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],[17654,17674,17633,17613]],[["final boolean getBoolean() throws Exception {","if(isNull()) return false;","return Utils.string2boolean(getString().trim());","}","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],[10742,5747,5776,10713]],[["if(obj == null) return 0;","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:"],[3445,3421,3412,3454]],[["}","}","package smallsql.junit;","import junit.framework.*;","import java.sql.*;","import java.math.*;"],[22651,23175,23169,22657]],[["addMessages(ENTRIES);","}","public String[][] getEntries() {","return ENTRIES;","}","private final String[][] ENTRIES = {"],[5782,11544,5788,11550]],[["}","final boolean rowInserted(){","return rowSource.rowInserted();","}","final boolean rowDeleted(){","return rowSource.rowDeleted();","}","void nullRow() {","rowSource.nullRow();"],[21863,21854,10964,10955]],[["case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],[17595,17552,17589,17558]],[["con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con1.setAutoCommit(false);","con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");","ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");","assertTrue( rs2.next() );"],[5370,5352,5346,5364]],[["case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();"],[17848,17857,15639,15630]],[["keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","}","}","}"],[9394,9404,9410,9400]],[["default:","throw new Error();","}","}","}","package smallsql.database;"],[3689,3695,8938,4453,8944,4447]],[["rs.next();","rs.next();","rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen","rs.last();","count = 0;","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],[14639,14616,14632,14655]],[["}","final long getRowPosition() {","return rowSource.getRowPosition();","}","final void setRowPosition(long rowPosition) throws Exception {","rowSource.setRowPosition(rowPosition);","}","final void nullRow() {","rowSource.nullRow();","row = 0;","}","final void noRow() {","rowSource.noRow();","row = 0;","}"],[13222,13237,11451,11436]],[["this.testValue = testValue;","}","public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}","public void setUp(){","tearDown();","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();"],[6824,23239,23223,6808]],[["Connection con = AllTests.getConnection();","try{","con.setAutoCommit(false);","con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");"],[5304,5113,5119,5298]],[["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();"],[1373,22361,1379,22367]],[["}","}","package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.SQLException;"],[13785,20377,20384,13792]],[["}","}","finally {","conn.close();","}","}"],[6239,6273,6267,6233]],[["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t<tables.size(); t++){","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i<indexes.size(); i++){","IndexDescription index = indexes.get(i);"],[11316,11283,11307,11274]],[["result = left.next();","if(result){","result = right.first();","if(!result){","switch(type){","case Join.LEFT_JOIN:","case Join.FULL_JOIN:","isOuterValid = false;"],[8830,8794,8822,8786]],[["if(value == null){","if(expr.isNull())","dataType = expr.getDataType();","else","initValue( expr );","}else if(!expr.isNull()){","switch(dataType){","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:"],[3188,3243,3178,3233]],[["case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","return readLong();","case SQLTokenizer.REAL:","return readFloat();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:"],[7819,7831,7879,7891]],[["rs.beforeFirst();","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"next\", rs.next() );","assertTrue(\"isFirst\", rs.isFirst() );"],[13635,13664,13629,13670]],[["try{","Statement st1 = con.createStatement();","ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","int count = rs.getInt(1);","if (count != rowCount){","if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}","if (count != rowCount){"],[3965,3952,3856,3869]],[["return false;","}","boolean last() throws Exception{","afterLast();","return previous();","}"],[10877,10883,21780,21786]],[["boolean isNull() throws Exception{","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places > 0){","for(int i=0; i<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i>places; i--){","factor *= 10;","}","value /= factor;","}"],[5904,5923,8551,8532]],[["}","public void tearDown(){","try {","dropTable( AllTests.getConnection(), table );","} catch (SQLException ex) {","ex.printStackTrace();","}","}"],[6120,6397,6405,6112]],[["Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","assertRowCount( 0, \"Select * from Scrollable\");","con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");","assertRowCount( 1, \"Select * from Scrollable\");","assertRowCount( 0, \"Select * from Scrollable Where 1=0\");","Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"],[19193,19249,19211,19219,19166,19185,19158,19241]],[["result |= (((long)nextEntry) << shift);","if(listEnum.stack>=3){","listEnum.offsetStack[listEnum.stack] = offset;","return result;","}","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;"],[9598,9608,9572,9562]],[["}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","return getString().getBytes();","}","final String getString() throws Exception {","if(isNull()) return null;"],[15413,1054,15423,1044]],[["assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","assertNull(oldValue);","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","int count = 1;","while(rs.next()){","assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );","oldValue = (Integer)rs.getObject(\"i\");","count++;","}","assertEquals( valueCount, count );","}"],[14330,14343,14410,14397]],[["if(places > 0){","value /= factor;","}else{","value *= factor;","}","return value;","}","}","package smallsql.database;"],[8561,8552,5924,5933]],[["}","boolean isExpressionsFromThisRowSource(Expressions columns){","return rowSource.isExpressionsFromThisRowSource(columns);","}","}","package smallsql.database;"],[13248,11465,21873,11459,21879,13242]],[["Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");","assertRowCount( 1, \"Select * from transactions\");","con.setAutoCommit(false);","con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","assertRowCount( 2, \"Select * from transactions\");"],[5176,5143,5134,5185]],[["}","final boolean isNull() throws Exception {","return param1.isNull() || param2.isNull() || param3.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;"],[8303,9914,9908,8309]],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTime( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10137,10144,2644,2637]],[["}","public SQLWarning getWarnings(){","return null;","}","public void clearWarnings(){","}"],[10210,10216,13512,13518]],[["node.addNode( digit, rowOffset );","return null;","}","return node.addRoot(digit);","}","node = node.addNode(digit);","if(node.isEmpty()){"],[21335,21383,21328,21376]],[["fail(\"SQLException 'Duplicated Column' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}","}finally{","dropTable(con, \"DuplicatedColumn\");","}","}"],[13977,13969,13984,13992]],[["wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[2624,10225,2618,2663,2548,10231,10118,2657,10124,2554]],[["StringBuffer buf = new StringBuffer(bytes.length << 1);","for(int i=0; i<bytes.length; i++){","buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );","buf.append( digits[ (bytes[i]     ) & 0x0F ] );","}","return buf.toString();","}"],[20727,20734,12084,12091]],[["assertRowCount( 4, \"Select * from transactions\");","con.commit();","assertRowCount( 4, \"Select * from transactions\");","}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}","}"],[5123,5133,5154,5144]],[["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}","}"],[5263,5256,5168,5189,5196,5175]],[["}","firstNode = false;","if(shift != 0) offset += pointerSize;","}","shift -= 16;","}","}"],[9546,9492,9499,9553]],[["wasNull = expr.isNull();","return expr.getInt();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],[10078,10072,2572,2578]]]