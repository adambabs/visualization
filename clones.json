[[["if(obj == null) return 0;","switch(dataType){","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:"],2],[["}","}","}","}","package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;"],2],[["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:"],2],[["assertEquals(1,pr.executeUpdate());","rs = pr.getGeneratedKeys();","assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","assertRowCount(1,rs);"],3],[["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:"],2],[["}","}else{","prev.nextLock = lock.nextLock;","}","return;","}","prev = lock;","lock = lock.nextLock;","}"],2],[["if(num.scale < scale){","num.setScale(scale);","}else","if(num.scale > scale){","setScale(num.scale);","}"],2],[["if(idx == -1){","if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}"],2],[["}","final boolean rowInserted(){","return false;","}","final boolean rowDeleted(){","return false;","}"],2],[["}","boolean isNull() throws Exception {","return param1.isNull();","}","final int getInt() throws Exception {","if(isNull()) return 0;","String str = param1.getString();"],3],[["if(isNull()) return null;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],2],[["}","final void beforeFirst() throws Exception {","rowSource.beforeFirst();","row = 0;","}","final boolean first() throws Exception {"],2],[["pr.close();","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","fis.close();","java.io.File file = new java.io.File(tableName+\".bin\");","file.delete();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}"],2],[["if(isNull()) return null;","return new MutableNumeric(getInt());","}","Object getObject() throws Exception {","if(isNull()) return null;","return Utils.getInteger(getInt());","}"],2],[["}","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}"],2],[["try{","rs.getString(\"v\");","fail(\"SQLException 'No current row' should be throw\");","}catch(SQLException ex){","assertSQLException(\"01000\", 0, ex);","}","}"],2],[["case SQLTokenizer.COMMA:","continue;","default:","throw new Error();","}","}","}"],2],[["}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","byte[] bytes = param1.getBytes();"],2],[["}","int getPrecision() {","return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );","}","}","package smallsql.database;"],2],[["}","private static TestValue a(String dataType, Object small, Object large){","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}","private static class TestValue{","String dataType;","Object small;","Object large;","}","}","package smallsql.database;"],2],[["switch(operation){","case IN:","case EQUALS_NULL:","case EQUALS:    return comp == 0;","case GREATER:   return comp >  0;","case GRE_EQU:   return comp >= 0;","case LESSER:    return comp <  0;","case LES_EQU:   return comp <= 0;","case UNEQUALS:  return comp != 0;","case BETWEEN:"],3],[["try{","java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");","byte bytes[] = new byte[1024];","for(int i=0; i<rowCount; i++){","fos.write(bytes);","}","fos.close();","java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");","long time = -System.currentTimeMillis();"],2],[["}catch(Throwable e){","con.rollback(savepoint);","throw SmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit()) con.commit();","}","}"],4],[["try{","int maxRows = Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatException e){","throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","}"],2],[["break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:"],2],[["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","}","throw new Error();","}"],2],[["assertTrue( rs.next() );","oldValue = rs.getString(\"v\");","int count = 1;","while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) > 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],2],[["rows.add(row);","}","}","}","}","Object[][] result = new Object[rows.size()][];","rows.toArray(result);","return result;","}"],3],[["case SQLTokenizer.UNIQUEIDENTIFIER:","return Utils.bytes2unique( page, this.offset);","default: throw new Error();","}","}","@Override"],2],[["}","if(serializeConnections.size() > 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}","tabLockConnection = con;","tabLockCount++;","TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);"],2],[["private static final TestValue[] TESTS = new TestValue[]{","a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],2],[["}","String getString() throws Exception{","Object obj = getObject();","if(obj == null) return null;","return obj.toString();","}","}"],2],[["if(!previous()){","return false;","}","}","}","return true;","}"],2],[["}","}","}","package smallsql.junit;","import java.sql.*;","import java.util.ArrayList;"],2],[["wasNull = expr.isNull();","return expr.getFloat();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["}catch(Throwable e){","if(raFile != null)","try{","raFile.close();","}catch(Exception e2){","DriverManager.println(e2.toString());","}","throw SmallSQLException.createFromException(e);","}","}"],2],[["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:"],4],[["try{","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["wasNull = expr.isNull();","return expr.getBoolean();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","assertFalse(\"next\", rs.next() );","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}"],2],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getDate( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal(scale);","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["wasNull = obj == null;","if(wasNull) return null;","return obj.toBigDecimal();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTimestamp( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["}finally{","dropTable(con1, \"transactions\");","con1.setAutoCommit(true);","con2.close();","}","}"],2],[["Statement st = con.createStatement();","try{","st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");","st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");","for(int i = 0; i < 200; i++){","Thread thread = new Thread(new Runnable(){","public void run(){","try{"],2],[["pr.setObject( 1, testValue.small);","pr.setObject( 2, testValue.large);","rs = pr.executeQuery();","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertTrue( \"To few rows\", rs.next() );","assertFalse( \"To many rows\", rs.next() );","pr.close();"],2],[["byte[] buffer = new byte[length];","System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );","return buffer;","}","return bytes;","}"],2],[["if(failed == null){","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}","}","batches.clear();","if(failed != null)","throw failed;","return result;","}"],2],[["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:"],3],[["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],2],[["final boolean getBoolean() throws Exception {","if(isNull()) return false;","return Utils.string2boolean(getString().trim());","}","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],2],[["if(obj == null) return 0;","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:"],2],[["}","}","package smallsql.junit;","import junit.framework.*;","import java.sql.*;","import java.math.*;"],2],[["addMessages(ENTRIES);","}","public String[][] getEntries() {","return ENTRIES;","}","private final String[][] ENTRIES = {"],2],[["}","final boolean rowInserted(){","return rowSource.rowInserted();","}","final boolean rowDeleted(){","return rowSource.rowDeleted();","}","void nullRow() {","rowSource.nullRow();"],2],[["case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],2],[["con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con1.setAutoCommit(false);","con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");","ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");","assertTrue( rs2.next() );"],2],[["case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();"],2],[["keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","}","}","}"],2],[["default:","throw new Error();","}","}","}","package smallsql.database;"],3],[["rs.next();","rs.next();","rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen","rs.last();","count = 0;","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],2],[["}","final long getRowPosition() {","return rowSource.getRowPosition();","}","final void setRowPosition(long rowPosition) throws Exception {","rowSource.setRowPosition(rowPosition);","}","final void nullRow() {","rowSource.nullRow();","row = 0;","}","final void noRow() {","rowSource.noRow();","row = 0;","}"],2],[["this.testValue = testValue;","}","public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","}","}","public void setUp(){","tearDown();","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();"],2],[["Connection con = AllTests.getConnection();","try{","con.setAutoCommit(false);","con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");"],2],[["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();"],2],[["}","}","package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.SQLException;"],2],[["}","}","finally {","conn.close();","}","}"],2],[["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t<tables.size(); t++){","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i<indexes.size(); i++){","IndexDescription index = indexes.get(i);"],2],[["result = left.next();","if(result){","result = right.first();","if(!result){","switch(type){","case Join.LEFT_JOIN:","case Join.FULL_JOIN:","isOuterValid = false;"],2],[["if(value == null){","if(expr.isNull())","dataType = expr.getDataType();","else","initValue( expr );","}else if(!expr.isNull()){","switch(dataType){","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:"],2],[["case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","return readLong();","case SQLTokenizer.REAL:","return readFloat();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:"],2],[["rs.beforeFirst();","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"next\", rs.next() );","assertTrue(\"isFirst\", rs.isFirst() );"],2],[["try{","Statement st1 = con.createStatement();","ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","int count = rs.getInt(1);","if (count != rowCount){","if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}","if (count != rowCount){"],2],[["return false;","}","boolean last() throws Exception{","afterLast();","return previous();","}"],2],[["boolean isNull() throws Exception{","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places > 0){","for(int i=0; i<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i>places; i--){","factor *= 10;","}","value /= factor;","}"],2],[["}","public void tearDown(){","try {","dropTable( AllTests.getConnection(), table );","} catch (SQLException ex) {","ex.printStackTrace();","}","}"],2],[["Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","assertRowCount( 0, \"Select * from Scrollable\");","con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");","assertRowCount( 1, \"Select * from Scrollable\");","assertRowCount( 0, \"Select * from Scrollable Where 1=0\");","Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"],4],[["result |= (((long)nextEntry) << shift);","if(listEnum.stack>=3){","listEnum.offsetStack[listEnum.stack] = offset;","return result;","}","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;"],2],[["}","final boolean isNull() throws Exception {","return param1.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;","return getString().getBytes();","}","final String getString() throws Exception {","if(isNull()) return null;"],2],[["assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","assertNull(oldValue);","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","int count = 1;","while(rs.next()){","assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );","oldValue = (Integer)rs.getObject(\"i\");","count++;","}","assertEquals( valueCount, count );","}"],2],[["if(places > 0){","value /= factor;","}else{","value *= factor;","}","return value;","}","}","package smallsql.database;"],2],[["}","boolean isExpressionsFromThisRowSource(Expressions columns){","return rowSource.isExpressionsFromThisRowSource(columns);","}","}","package smallsql.database;"],3],[["Connection con = AllTests.getConnection();","try{","con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","assertRowCount( 0, \"Select * from transactions\");","con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");","assertRowCount( 1, \"Select * from transactions\");","con.setAutoCommit(false);","con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","assertRowCount( 2, \"Select * from transactions\");"],2],[["}","final boolean isNull() throws Exception {","return param1.isNull() || param2.isNull() || param3.isNull();","}","final byte[] getBytes() throws Exception{","if(isNull()) return null;"],2],[["wasNull = expr.isNull();","if(wasNull) return null;","return DateTime.getTime( expr.getLong() );","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2],[["}","public SQLWarning getWarnings(){","return null;","}","public void clearWarnings(){","}"],2],[["node.addNode( digit, rowOffset );","return null;","}","return node.addRoot(digit);","}","node = node.addNode(digit);","if(node.isEmpty()){"],2],[["fail(\"SQLException 'Duplicated Column' should be throw\");","}catch(SQLException e){","assertSQLException(\"01000\", 0, e);","}","}finally{","dropTable(con, \"DuplicatedColumn\");","}","}"],2],[["wasNull = obj == null;","return obj;","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],5],[["StringBuffer buf = new StringBuffer(bytes.length << 1);","for(int i=0; i<bytes.length; i++){","buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );","buf.append( digits[ (bytes[i]     ) & 0x0F ] );","}","return buf.toString();","}"],2],[["assertRowCount( 4, \"Select * from transactions\");","con.commit();","assertRowCount( 4, \"Select * from transactions\");","}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}","}"],2],[["}finally{","try{","con.createStatement().execute(\"Drop Table transactions\");","}catch(Throwable e){e.printStackTrace();}","con.setAutoCommit(true);","}","}"],3],[["}","firstNode = false;","if(shift != 0) offset += pointerSize;","}","shift -= 16;","}","}"],2],[["wasNull = expr.isNull();","return expr.getInt();","}catch(Exception e){","throw SmallSQLException.createFromException( e );","}","}"],2]]